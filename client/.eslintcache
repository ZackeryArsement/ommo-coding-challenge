[{"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\index.js":"1","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\App.js":"2","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\Homepage.js":"3","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\utils\\queries.js":"4","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\BaseCalibration.js":"5","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\SensorOutput.js":"6","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\SensorData.js":"7","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\PerformanceOutput.js":"8","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\Sensors.js":"9"},{"size":172,"mtime":1652249589586,"results":"10","hashOfConfig":"11"},{"size":881,"mtime":1652253783791,"results":"12","hashOfConfig":"11"},{"size":26549,"mtime":1652325408094,"results":"13","hashOfConfig":"11"},{"size":1477,"mtime":1652288833913,"results":"14","hashOfConfig":"11"},{"size":6195,"mtime":1652376081714,"results":"15","hashOfConfig":"11"},{"size":3190,"mtime":1652285518488,"results":"16","hashOfConfig":"11"},{"size":5952,"mtime":1652376080730,"results":"17","hashOfConfig":"11"},{"size":2705,"mtime":1652284552861,"results":"18","hashOfConfig":"11"},{"size":1033,"mtime":1652291095178,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"xw1hmg",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\index.js",[],["43","44"],"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\App.js",["45","46"],"import logo from './logo.svg';\nimport './App.css';\nimport Homepage from './components/Homepage';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n  opts: {\n    mode: 'cors',\n  }\n});\n\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  \n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nconst token = localStorage.getItem(\"id_token\")\n\nfunction App() {\n  return (\n    <div>\n      <ApolloProvider client={client}>\n        <Homepage />\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\Homepage.js",["47","48","49","50","51","52","53","54","55","56","57","58","59","60","61"],"import classes from './Homepage.module.css';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport * as moment from 'moment';\r\n\r\n//import specific rows depending on data type\r\nimport BaseCalibration from './dataRows/BaseCalibration.js'\r\nimport PerformanceOutput from './dataRows/PerformanceOutput'\r\nimport SensorData from './dataRows/SensorData.js'\r\nimport SensorOutput from './dataRows/SensorOutput.js'\r\nimport Sensors from './dataRows/Sensors';\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_SENSOR_CALIBRATION_DATA } from './utils/queries';\r\nimport { QUERY_BASE_CALIBRATION_DATA } from './utils/queries';\r\nimport { QUERY_SENSOR_CALIBRATION_OUTPUT } from './utils/queries';\r\nimport { QUERY_PERFORMANCE_VALIDATION_OUTPUT } from './utils/queries';\r\nimport { QUERY_SENSOR } from './utils/queries';\r\n\r\n\r\nconst Homepage = () => {\r\n    // store data sets\r\n    const [sensorCalData, setSensorCalData] = useState([]);\r\n    const [baseCalData, setBaseCalData] = useState([]);\r\n    const [sensorCalOutput, setSensorCalOutput] = useState([]);\r\n    const [performanceValOutput, setPerformanceValOutput] = useState([]);\r\n    const [sensors, setSensors] = useState([])\r\n\r\n    // query parameters\r\n    const [filterDataSet, setFilterDataSet] = useState('Sensor Calibration Data')\r\n    const [dataSet, setDataSet] = useState('Sensor Calibration Data')\r\n    const [sensorTypeString, setSensorTypeString] = useState('All')\r\n    const [sensorTypeNumber, setSensorTypeNumber] = useState('')\r\n    const [baseID, setBaseID] = useState('')\r\n    const [startDay, setStartDay] = useState('')\r\n    const [endDay, setEndDay] = useState('')\r\n    const [algVersion, setAlgVersion] = useState('')\r\n    const [calFile, setCalFile] = useState('')\r\n    const [accuracy, setAccuracy] = useState(2)\r\n    const [precision, setPrecision] = useState(2)\r\n\r\n    // filtered data\r\n    const [filteredData, setFilteredData] = useState([])\r\n\r\n    const { loading: loadSensorCalData, data: dataSensorCalData, refetch: refetchSensorCalData } = useQuery(QUERY_SENSOR_CALIBRATION_DATA);\r\n    const { loading: loadBaseCalData, data: dataBaseCalData, refetch: refetchBaseCalData } = useQuery(QUERY_BASE_CALIBRATION_DATA);\r\n    const { loading: loadSensorCalOutput, data: dataSensorCalOutput, refetch: refetchSensorCalOutput } = useQuery(QUERY_SENSOR_CALIBRATION_OUTPUT);\r\n    const { loading: loadPerformanceValOutput, data: dataPerformanceValOutput, refetch: refetchPerformanceValOutput } = useQuery(QUERY_PERFORMANCE_VALIDATION_OUTPUT);\r\n    const { loading: loadSensors, data: dataSensors, refetch: refetchSensors } = useQuery(QUERY_SENSOR);\r\n\r\n    useEffect(() => {\r\n        if(!loadSensorCalData){\r\n            setSensorCalData(dataSensorCalData.sensorCalData)\r\n        }\r\n    }, [loadSensorCalData])\r\n\r\n    useEffect(() => {\r\n        if(!loadBaseCalData){\r\n            setBaseCalData(dataBaseCalData.baseCalData)\r\n        }\r\n    }, [loadBaseCalData])\r\n\r\n    useEffect(() => {\r\n        if(!loadSensorCalOutput){\r\n            setSensorCalOutput(dataSensorCalOutput.sensorCalOutput)\r\n        }\r\n    }, [loadSensorCalOutput])\r\n\r\n    useEffect(() => {\r\n        if(!loadPerformanceValOutput){\r\n            setPerformanceValOutput(dataPerformanceValOutput.performanceValOutput)\r\n        }\r\n    }, [loadPerformanceValOutput])\r\n\r\n    useEffect(() => {\r\n        if(!loadSensors){\r\n            setSensors(dataSensors.sensor)\r\n        }\r\n    }, [loadSensors])\r\n\r\n\r\n    const searchData = () => {\r\n        let tempFiltered;\r\n\r\n        // First we do an intial filter to see what data type we want to pull\r\n        if(filterDataSet === 'Sensor Calibration Data'){\r\n            setDataSet('Sensor Calibration Data')\r\n            tempFiltered = sensorCalData;\r\n        } else if (filterDataSet === 'Base Station Calibration Data'){\r\n            setDataSet('Base Station Calibration Data')\r\n            tempFiltered = baseCalData;\r\n        } else if (filterDataSet === 'Sensor Calibration Output'){\r\n            setDataSet('Sensor Calibration Output')\r\n            tempFiltered = sensorCalOutput;\r\n        } else if (filterDataSet === 'Performance Validation Output'){\r\n            setDataSet('Performance Validation Output')\r\n            tempFiltered = performanceValOutput;\r\n        } else if (filterDataSet === 'All'){\r\n            setDataSet('All')\r\n            tempFiltered = sensors;\r\n        }\r\n\r\n        // filter this data type with the variuos other filters\r\n        setFilteredData(filterData(tempFiltered))\r\n    }\r\n\r\n    const filterData = (dataToFilter) => {\r\n        // Filter\r\n\r\n        // As we go through the filters we have to check and make sure there is still 1 array value in the data we are parsing... this prevents an error from occuring when we try to retrieve data from an empty array\r\n        \r\n        // if the data type has a date then check if the user has a date filter\r\n        if(('calibration_date' in dataToFilter[0]) || ('generation_date' in dataToFilter[0]) || ('validation_date' in dataToFilter[0])){\r\n            // filter by date if it is selected\r\n            if('calibration_date' in dataToFilter[0]){\r\n                if(moment((startDay), 'MM/DD/YYYY', true).isValid()){\r\n                    dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                        let date = new Date(dataPoint.calibration_date*1);\r\n                        let day = date.getDate();\r\n                        let month = date.getMonth()+1;\r\n                        let year = date.getFullYear();\r\n    \r\n                        if(day.length < 2){\r\n                            day = '0' + day;\r\n                        }\r\n                        if(month.length < 2){\r\n                            month = '0' + month;\r\n                        }\r\n        \r\n                        let calibrationDate = month + '/' + day + '/' + year\r\n                        // only return the values that happened after the start date\r\n                        return (moment(calibrationDate, \"MM/DD/YYYY\") > moment((startDay), 'MM/DD/YYYY'))\r\n                    })\r\n                }\r\n\r\n                if(moment((endDay), 'MM/DD/YYYY', true).isValid()){\r\n                    dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                        let date = new Date(dataPoint.calibration_date*1);\r\n                        let day = date.getDate();\r\n                        let month = date.getMonth()+1;\r\n                        let year = date.getFullYear();\r\n    \r\n                        if(day.length < 2){\r\n                            day = '0' + day;\r\n                        }\r\n                        if(month.length < 2){\r\n                            month = '0' + month;\r\n                        }\r\n        \r\n                        let calibrationDate = month + '/' + day + '/' + year\r\n                        // only return the values that happened after the start date\r\n                        return (moment(calibrationDate, \"MM/DD/YYYY\") < moment((endDay), 'MM/DD/YYYY'))\r\n                    })\r\n                }\r\n            } else if ('generation_date' in dataToFilter[0]){\r\n                if(moment((startDay), 'MM/DD/YYYY', true).isValid()){\r\n                    dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                        let date = new Date(dataPoint.generation_date*1);\r\n                        let day = date.getDate();\r\n                        let month = date.getMonth()+1;\r\n                        let year = date.getFullYear();\r\n    \r\n                        if(day.length < 2){\r\n                            day = '0' + day;\r\n                        }\r\n                        if(month.length < 2){\r\n                            month = '0' + month;\r\n                        }\r\n        \r\n                        let calibrationDate = month + '/' + day + '/' + year\r\n                        // only return the values that happened after the start date\r\n                        return (moment(calibrationDate, \"MM/DD/YYYY\") > moment((startDay), 'MM/DD/YYYY'))\r\n                    })\r\n                }\r\n\r\n                if(moment((endDay), 'MM/DD/YYYY', true).isValid()){\r\n                    dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                        let date = new Date(dataPoint.generation_date*1);\r\n                        let day = date.getDate();\r\n                        let month = date.getMonth()+1;\r\n                        let year = date.getFullYear();\r\n    \r\n                        if(day.length < 2){\r\n                            day = '0' + day;\r\n                        }\r\n                        if(month.length < 2){\r\n                            month = '0' + month;\r\n                        }\r\n        \r\n                        let calibrationDate = month + '/' + day + '/' + year\r\n                        // only return the values that happened after the start date\r\n                        return (moment(calibrationDate, \"MM/DD/YYYY\") < moment((endDay), 'MM/DD/YYYY'))\r\n                    })\r\n                }\r\n            } else if ('validation_date' in dataToFilter[0]){\r\n                if(moment((startDay), 'MM/DD/YYYY', true).isValid()){\r\n                    dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                        let date = new Date(dataPoint.validation_date*1);\r\n                        let day = date.getDate();\r\n                        let month = date.getMonth()+1;\r\n                        let year = date.getFullYear();\r\n    \r\n                        if(day.length < 2){\r\n                            day = '0' + day;\r\n                        }\r\n                        if(month.length < 2){\r\n                            month = '0' + month;\r\n                        }\r\n        \r\n                        let calibrationDate = month + '/' + day + '/' + year\r\n                        // only return the values that happened after the start date\r\n                        return (moment(calibrationDate, \"MM/DD/YYYY\") > moment((startDay), 'MM/DD/YYYY'))\r\n                    })\r\n                }\r\n\r\n                if(moment((endDay), 'MM/DD/YYYY', true).isValid()){\r\n                    dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                        let date = new Date(dataPoint.validation_date*1);\r\n                        let day = date.getDate();\r\n                        let month = date.getMonth()+1;\r\n                        let year = date.getFullYear();\r\n    \r\n                        if(day.length < 2){\r\n                            day = '0' + day;\r\n                        }\r\n                        if(month.length < 2){\r\n                            month = '0' + month;\r\n                        }\r\n        \r\n                        let calibrationDate = month + '/' + day + '/' + year\r\n                        // only return the values that happened after the start date\r\n                        return (moment(calibrationDate, \"MM/DD/YYYY\") < moment((endDay), 'MM/DD/YYYY'))\r\n                    })\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // if the datatype has an algorithm version then filter for that version\r\n        if(dataToFilter.length > 0){\r\n            if('algorithm_version' in dataToFilter[0]){\r\n\r\n                if(algVersion.split('.').length >= 3){\r\n                    dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                        return dataPoint.algorithm_version === algVersion\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        // if the datatype has a calibration file linked to it then filter for that file\r\n        if(dataToFilter.length > 0){\r\n            if('calibration_file' in dataToFilter[0]){\r\n                if(calFile.length > 0 && !isNaN(calFile[0])){\r\n                    dataToFilter = dataToFilter.filter((dataPoint) => dataPoint.calibration_file.split('-')[1] === calFile)\r\n                }\r\n            }\r\n        }\r\n\r\n        // filter data by their associated sensor types / accuracy / precision\r\n        if(dataToFilter.length > 0){\r\n            if('sensors' in dataToFilter[0]){\r\n                // filter sensor types\r\n                if(dataToFilter.length > 0){\r\n                    if('sensor_type' in dataToFilter[0].sensors[0]){\r\n                        // filter by their part type\r\n                        if(sensorTypeString !== 'All' && !(sensorTypeNumber.length > 0 && !isNaN(sensorTypeNumber[0]))){\r\n                            dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                                let containsString;\r\n    \r\n                                // if any of the sensors contain that kind of part then return this data file\r\n                                dataPoint.sensors.map((sensor) => {\r\n                                    if(sensor.sensor_type.split('-')[0] === sensorTypeString){\r\n                                        containsString = true;\r\n                                    }\r\n                                })\r\n    \r\n                                return containsString\r\n                            })\r\n                        }\r\n    \r\n                        // filter by their part index\r\n                        if((sensorTypeNumber.length > 0 && !isNaN(sensorTypeNumber[0])) && !(sensorTypeString !== 'All')){\r\n                            dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                                let containsIndex;\r\n    \r\n                                // if any of the sensors contain that kind of part then return this data file\r\n                                dataPoint.sensors.map((sensor) => {\r\n                                    if(sensor.sensor_type.split('-')[1] === sensorTypeNumber){\r\n                                        containsIndex = true;\r\n                                    }\r\n                                })\r\n                                \r\n                                return containsIndex\r\n                            })\r\n                        }\r\n    \r\n                        // if type and index are selected then look for that specific item\r\n                        if(sensorTypeString !== 'All' && sensorTypeNumber.length > 0 && !isNaN(sensorTypeNumber[0])){\r\n                            dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                                let containsType;\r\n    \r\n                                // if any of the sensors contain that kind of part then return this data file\r\n                                dataPoint.sensors.map((sensor) => {\r\n                                    if(sensor.sensor_type === sensorTypeString + '-' + sensorTypeNumber){\r\n                                        containsType = true;\r\n                                    }\r\n                                })\r\n                                \r\n                                return containsType\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // filter sensors accuracy\r\n                if(dataToFilter.length > 0){\r\n                    if('accuracy' in dataToFilter[0].sensors[0]){\r\n                        let updateAccuracy = Math.round(accuracy*1000)\r\n\r\n                        if(accuracy.length > 1 && !isNaN(updateAccuracy)){\r\n                            dataToFilter = dataToFilter.filter((dataPoint) =>{\r\n                                let isWithinAccuracy = true;\r\n\r\n                                dataPoint.sensors.map((sensor) => {\r\n                                    if(Math.round(sensor.accuracy*1000) >= updateAccuracy){\r\n                                        isWithinAccuracy = false;\r\n                                    }\r\n                                })\r\n\r\n                                return isWithinAccuracy\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // filter sensors precision\r\n                if(dataToFilter.length > 0){\r\n                    if('precision' in dataToFilter[0].sensors[0]){\r\n                        let updatePrecision = Math.round(precision*1000)\r\n\r\n                        if(precision.length > 1 && !isNaN(updatePrecision)){\r\n                            dataToFilter = dataToFilter.filter((dataPoint) =>{\r\n                                let isWithinPrecision = true;\r\n\r\n                                dataPoint.sensors.map((sensor) => {\r\n                                    if(Math.round(sensor.precision*1000) >= updatePrecision){\r\n                                        isWithinPrecision = false;\r\n                                    }\r\n                                })\r\n\r\n                                return isWithinPrecision\r\n                            })\r\n                        }\r\n                    } \r\n                }\r\n            }\r\n        }\r\n\r\n        // filter all sensors by their type\r\n        if(dataToFilter.length > 0){\r\n            if('sensor_type' in dataToFilter[0]){\r\n                // filter by their part type\r\n                if(sensorTypeString !== 'All' && !(sensorTypeNumber.length > 0 && !isNaN(sensorTypeNumber[0]))){\r\n                    dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                        return dataPoint.sensor_type.split('-')[0] === sensorTypeString\r\n                    })\r\n                }\r\n\r\n                // filter by their part index\r\n                if((sensorTypeNumber.length > 0 && !isNaN(sensorTypeNumber[0])) && !(sensorTypeString !== 'All')){\r\n                    dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                        return dataPoint.sensor_type.split('-')[1] === sensorTypeNumber\r\n                    })\r\n                }\r\n\r\n                // if type and index are selected then look for that specific item\r\n                if(sensorTypeString !== 'All' && sensorTypeNumber.length > 0 && !isNaN(sensorTypeNumber[0])){\r\n                    dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                        return dataPoint.sensor_type === sensorTypeString + '-' + sensorTypeNumber\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        // if the datatype has a basestation id filter by the user input\r\n        if(dataToFilter.length > 0){\r\n            if('base_station_unique_id' in dataToFilter[0]){\r\n                if(baseID.length > 0 && !isNaN(baseID)){\r\n                    dataToFilter = dataToFilter.filter((dataPoint) => {\r\n                        return dataPoint.base_station_unique_id === baseID\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        // if we are searching all sensors then filter them by their accuracy\r\n        if(dataToFilter.length >0){\r\n            if('accuracy' in dataToFilter[0]){\r\n                let updateAccuracy = Math.round(accuracy*1000)\r\n\r\n                if(accuracy.length > 1 && !isNaN(updateAccuracy)){\r\n                    dataToFilter = dataToFilter.filter((sensor) =>{\r\n                        return sensor.accuracy*1000 <= updateAccuracy\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        // if we are searching all sensors then filter them by their precision\r\n        if(dataToFilter.length >0){\r\n            if('precision' in dataToFilter[0]){\r\n                let updatePrecision = Math.round(precision*1000)\r\n\r\n                if(precision.length > 1 && !isNaN(updatePrecision)){\r\n                    dataToFilter = dataToFilter.filter((sensor) =>{\r\n                        return sensor.precision*1000 <= updatePrecision\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        return dataToFilter\r\n    }\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n\r\n            {(!dataSensorCalData || !dataBaseCalData || !dataSensorCalOutput || !dataPerformanceValOutput || !dataSensors) ? (\r\n                <div className={classes.loading}>Loading... Please Wait Before Searching Data</div>\r\n            ): (null)}\r\n\r\n            <div className={classes.inputCollection}>\r\n                <div className={classes.inputs}>\r\n                    <div className={classes.inputParam}>\r\n                        <div>\r\n                            Data set\r\n                        </div>\r\n                        <select onChange={(e) =>setFilterDataSet(e.target.value)}>\r\n                            <option value='Sensor Calibration Data'>Sensor Calibration Data</option>\r\n                            <option value='Base Station Calibration Data'>Base Station Calibration Data</option>\r\n                            <option value='Sensor Calibration Output'>Sensor Calibration Output</option>\r\n                            <option value='Performance Validation Output'>Performance Validation Output</option>\r\n                            <option value='All'>All Sensors</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className={classes.inputParam}>\r\n                        <div>\r\n                            Sensor Type\r\n                        </div>\r\n\r\n                        <select onChange={(e) =>setSensorTypeString(e.target.value)}>\r\n                        <option value='All'>All</option>\r\n                        <option value='thumb'>Thumb</option>\r\n                        <option value='pointer'>Pointer</option>\r\n                        <option value='middle'>Middle</option>\r\n                        <option value='index'>Index</option>\r\n                        <option value='pinky'>Pinky</option>\r\n                        <option value='base'>Base</option>\r\n                    </select>\r\n                    </div>\r\n\r\n                    <div className={classes.inputParam}>\r\n                        <div>Type Index</div>\r\n\r\n                        <input style={{width:'30px'}} type='text' onChange={(e) =>setSensorTypeNumber(e.target.value)}/>\r\n                    </div>\r\n                    <div className={classes.inputParam}>\r\n                        <div>Base ID</div>\r\n\r\n                        <input style={{width:'30px'}} type='text' onChange={(e) =>setBaseID(e.target.value)}/>\r\n                    </div>\r\n\r\n                    <div className={classes.inputParam}>\r\n                        <div>Start Date(MM/DD/YYYY)</div>\r\n                        <input style={{width:'80px'}} type='text' onChange={(e) =>setStartDay(e.target.value)}/>\r\n                    </div>\r\n                    <div className={classes.inputParam}>\r\n                        <div>End Date(MM/DD/YYYY)</div>\r\n                        <input style={{width:'80px'}} type='text' onChange={(e) =>setEndDay(e.target.value)}/>\r\n                    </div>\r\n                    <div className={classes.inputParam}>\r\n                        <div>Algorithm Version (#.#.#)</div>\r\n                        <input style={{width:'80px'}} type='text' onChange={(e) =>setAlgVersion(e.target.value)}/>\r\n                    </div>\r\n                    <div className={classes.inputParam}>\r\n                        <div>Cali. File Index</div>\r\n                        <input style={{width:'30px'}} type='numeric' onChange={(e) =>setCalFile(e.target.value)}/>\r\n                    </div>\r\n                    <div className={classes.inputParam}>\r\n                        <div>Min Accuracy</div>\r\n                        <input style={{width:'30px'}} type='numeric' onChange={(e) =>setAccuracy(e.target.value)}/>\r\n                    </div>\r\n                    <div className={classes.inputParam}>\r\n                        <div>Min Precision</div>\r\n                        <input style={{width:'30px'}} type='numeric' onChange={(e) =>setPrecision(e.target.value)}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <button className={classes.button} onClick={() => searchData()}>Search</button>\r\n            </div>\r\n\r\n            <div className={classes.dataTable}>\r\n                <div className={classes.filterTitle}>Filtered Data</div>\r\n                {filteredData.length > 0 ? (\r\n                <div>\r\n                    {/* ////////////////////////////////////////////////////////////////////////////////////////////// */}\r\n                    {dataSet === 'Sensor Calibration Data' ? (\r\n                        filteredData.map((dataFile, index) => (\r\n                            <div key={index} className={classes.transitionHeight}>\r\n                                <SensorData data={dataFile}/>\r\n                            </div>\r\n                        ))\r\n                    ) : (null)}\r\n                    {/* ////////////////////////////////////////////////////////////////////////////////////////////// */}\r\n                    {dataSet === 'Base Station Calibration Data' ? (\r\n                        filteredData.map((dataFile, index) => (\r\n                            <div key={index} className={classes.transitionHeight}>\r\n                                <BaseCalibration data={dataFile}/>\r\n                            </div>\r\n                        ))\r\n                    ) : (null)}\r\n                    {/* ////////////////////////////////////////////////////////////////////////////////////////////// */}\r\n                    {dataSet === 'Sensor Calibration Output' ? (\r\n                        filteredData.map((dataFile, index) => (\r\n                            <div key={index} className={classes.transitionHeight}>\r\n                                <SensorOutput data={dataFile}/>\r\n                            </div>\r\n                        ))\r\n                    ) : (null)}\r\n                    {/* ////////////////////////////////////////////////////////////////////////////////////////////// */}\r\n                    {dataSet === 'Performance Validation Output' ? (\r\n                        filteredData.map((dataFile, index) => (\r\n                            <div key={index} className={classes.transitionHeight}>\r\n                                <PerformanceOutput data={dataFile}/>\r\n                            </div>\r\n                        ))\r\n                    ) : (null)}\r\n                    {/* ////////////////////////////////////////////////////////////////////////////////////////////// */}\r\n                    {dataSet === 'All' ? (\r\n                        filteredData.map((dataFile, index) => (\r\n                            <div key={index} className={classes.transitionHeight}>\r\n                                <Sensors data={dataFile}/>\r\n                            </div>\r\n                        ))\r\n                    ) : (null)}\r\n                </div>\r\n                ): ( null )}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\utils\\queries.js",[],"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\BaseCalibration.js",["62"],"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\SensorOutput.js",["63"],"// Displays:\r\n// calibration_file\r\n// generation_date\r\n// algorithm_version\r\n// sensors []\r\n\r\nimport classes from './row.module.css'\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst SensorOutput = ({data}) =>{\r\n        let date = new Date(data.generation_date*1);\r\n        let day = date.getDate();\r\n        let month = date.getMonth()+1;\r\n        let year = date.getFullYear();\r\n    \r\n        const [showSensors, setShowSensors] = useState(false);        \r\n    \r\n        let generationDate = month + '/' + day + '/' + year\r\n        return (\r\n            <div>\r\n                <div className={classes.row}>\r\n                    <div>\r\n                        <div>\r\n                            Calibration File\r\n                        </div>\r\n                        <div>{data.calibration_file}</div>\r\n                    </div>\r\n    \r\n                    <div>\r\n                        <div>\r\n                            Generation Date\r\n                        </div>\r\n                        <div>{generationDate}</div>\r\n    \r\n                    </div>\r\n    \r\n                    <div>\r\n                        <div>\r\n                            Algorithm Version\r\n                        </div>\r\n                        <div>{data.algorithm_version}</div>\r\n    \r\n                    </div>\r\n    \r\n                    <div>\r\n                        <div>\r\n                            Sensor List\r\n                        </div>\r\n                        <button onClick={() => setShowSensors(!showSensors)}>v</button>\r\n                    </div>\r\n                </div>\r\n    \r\n                {/* Sensors should show: */}\r\n                {/* unique_id */}\r\n                {/* calibration_parameters */}\r\n                {showSensors ? (\r\n                    <div className={classes.sensors}>\r\n                        {data.sensors.map((sensor, index) => (\r\n                            <div key={index} className={classes.row}>\r\n                                <div>\r\n                                    <div>\r\n                                        Unique ID\r\n                                    </div>\r\n                                    {sensor.sensor_unique_id}\r\n                                </div>\r\n    \r\n                                <div>\r\n                                    <div>\r\n                                        Calibration Parameters\r\n                                    </div>\r\n                                    <div>\r\n                                        [{sensor.calibration_parameters[0].split(':')[0]}]\r\n                                    </div>\r\n                                    <div>\r\n                                        [{sensor.calibration_parameters[0].split(':')[1]}]\r\n                                    </div>\r\n                                    <div>\r\n                                        [{sensor.calibration_parameters[0].split(':')[2]}]\r\n                                    </div>\r\n                                </div>\r\n    \r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n    \r\n                ) : (null)}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default SensorOutput","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\SensorData.js",["64"],"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\PerformanceOutput.js",["65"],"// Displays:\r\n// validation_date\r\n// algorithm_version\r\n// base_station_unique_id\r\n// sensors []\r\n\r\nimport classes from './row.module.css'\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst PerformanceOutput = ({data}) =>{\r\n    let date = new Date(data.validation_date*1);\r\n    let day = date.getDate();\r\n    let month = date.getMonth()+1;\r\n    let year = date.getFullYear();\r\n\r\n    const [showSensors, setShowSensors] = useState(false);\r\n\r\n    let validationDate = month + '/' + day + '/' + year\r\n    return (\r\n        <div>\r\n            <div className={classes.row}>\r\n                <div>\r\n                    <div>\r\n                        Validation Date\r\n                    </div>\r\n                    <div>{validationDate}</div>\r\n                </div>\r\n\r\n                <div>\r\n                    <div>\r\n                        Algorithm Version\r\n                    </div>\r\n                    <div>{data.algorithm_version}</div>\r\n\r\n                </div>\r\n\r\n                <div>\r\n                    <div>\r\n                        Base Station ID\r\n                    </div>\r\n                    <div>{data.base_station_unique_id}</div>\r\n\r\n                </div>\r\n\r\n                <div>\r\n                    <div>\r\n                        Sensor List\r\n                    </div>\r\n                    <button onClick={() => setShowSensors(!showSensors)}>v</button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Sensors should show: */}\r\n            {/* unique_id */}\r\n            {/* accuracy */}\r\n            {/* precision */}\r\n            {showSensors ? (\r\n                <div className={classes.sensors}>\r\n                    {data.sensors.map((sensor, index) => (\r\n                        <div key={index} className={classes.row}>\r\n                            <div>\r\n                                <div>\r\n                                    Unique ID\r\n                                </div>\r\n                                {sensor.sensor_unique_id}\r\n                            </div>\r\n\r\n                            <div>\r\n                                <div>\r\n                                    Accuracy\r\n                                </div>\r\n                                {sensor.accuracy}mm\r\n                            </div>\r\n\r\n                            <div>\r\n                                <div>\r\n                                    Precision\r\n                                </div>\r\n                                {sensor.precision}mm\r\n                            </div>\r\n\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n            ) : (null)}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default PerformanceOutput","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\Sensors.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":1,"column":8,"nodeType":"72","messageId":"73","endLine":1,"endColumn":12},{"ruleId":"70","severity":1,"message":"74","line":37,"column":7,"nodeType":"72","messageId":"73","endLine":37,"endColumn":12},{"ruleId":"70","severity":1,"message":"75","line":45,"column":75,"nodeType":"72","messageId":"73","endLine":45,"endColumn":95},{"ruleId":"70","severity":1,"message":"76","line":46,"column":71,"nodeType":"72","messageId":"73","endLine":46,"endColumn":89},{"ruleId":"70","severity":1,"message":"77","line":47,"column":79,"nodeType":"72","messageId":"73","endLine":47,"endColumn":101},{"ruleId":"70","severity":1,"message":"78","line":48,"column":89,"nodeType":"72","messageId":"73","endLine":48,"endColumn":116},{"ruleId":"70","severity":1,"message":"79","line":49,"column":63,"nodeType":"72","messageId":"73","endLine":49,"endColumn":77},{"ruleId":"80","severity":1,"message":"81","line":55,"column":8,"nodeType":"82","endLine":55,"endColumn":27,"suggestions":"83"},{"ruleId":"80","severity":1,"message":"84","line":61,"column":8,"nodeType":"82","endLine":61,"endColumn":25,"suggestions":"85"},{"ruleId":"80","severity":1,"message":"86","line":67,"column":8,"nodeType":"82","endLine":67,"endColumn":29,"suggestions":"87"},{"ruleId":"80","severity":1,"message":"88","line":73,"column":8,"nodeType":"82","endLine":73,"endColumn":34,"suggestions":"89"},{"ruleId":"80","severity":1,"message":"90","line":79,"column":8,"nodeType":"82","endLine":79,"endColumn":21,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":272,"column":64,"nodeType":"94","messageId":"95","endLine":272,"endColumn":66},{"ruleId":"92","severity":1,"message":"93","line":288,"column":64,"nodeType":"94","messageId":"95","endLine":288,"endColumn":66},{"ruleId":"92","severity":1,"message":"93","line":304,"column":64,"nodeType":"94","messageId":"95","endLine":304,"endColumn":66},{"ruleId":"92","severity":1,"message":"93","line":325,"column":64,"nodeType":"94","messageId":"95","endLine":325,"endColumn":66},{"ruleId":"92","severity":1,"message":"93","line":346,"column":64,"nodeType":"94","messageId":"95","endLine":346,"endColumn":66},{"ruleId":"70","severity":1,"message":"96","line":8,"column":20,"nodeType":"72","messageId":"73","endLine":8,"endColumn":29},{"ruleId":"70","severity":1,"message":"96","line":9,"column":20,"nodeType":"72","messageId":"73","endLine":9,"endColumn":29},{"ruleId":"70","severity":1,"message":"96","line":7,"column":20,"nodeType":"72","messageId":"73","endLine":7,"endColumn":29},{"ruleId":"70","severity":1,"message":"96","line":9,"column":20,"nodeType":"72","messageId":"73","endLine":9,"endColumn":29},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'token' is assigned a value but never used.","'refetchSensorCalData' is assigned a value but never used.","'refetchBaseCalData' is assigned a value but never used.","'refetchSensorCalOutput' is assigned a value but never used.","'refetchPerformanceValOutput' is assigned a value but never used.","'refetchSensors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dataSensorCalData.sensorCalData'. Either include it or remove the dependency array.","ArrayExpression",["99"],"React Hook useEffect has a missing dependency: 'dataBaseCalData.baseCalData'. Either include it or remove the dependency array.",["100"],"React Hook useEffect has a missing dependency: 'dataSensorCalOutput.sensorCalOutput'. Either include it or remove the dependency array.",["101"],"React Hook useEffect has a missing dependency: 'dataPerformanceValOutput.performanceValOutput'. Either include it or remove the dependency array.",["102"],"React Hook useEffect has a missing dependency: 'dataSensors.sensor'. Either include it or remove the dependency array.",["103"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [dataSensorCalData.sensorCalData, loadSensorCalData]",{"range":"114","text":"115"},"Update the dependencies array to be: [dataBaseCalData.baseCalData, loadBaseCalData]",{"range":"116","text":"117"},"Update the dependencies array to be: [dataSensorCalOutput.sensorCalOutput, loadSensorCalOutput]",{"range":"118","text":"119"},"Update the dependencies array to be: [dataPerformanceValOutput.performanceValOutput, loadPerformanceValOutput]",{"range":"120","text":"121"},"Update the dependencies array to be: [dataSensors.sensor, loadSensors]",{"range":"122","text":"123"},[2755,2774],"[dataSensorCalData.sensorCalData, loadSensorCalData]",[2908,2925],"[dataBaseCalData.baseCalData, loadBaseCalData]",[3075,3096],"[dataSensorCalOutput.sensorCalOutput, loadSensorCalOutput]",[3266,3292],"[dataPerformanceValOutput.performanceValOutput, loadPerformanceValOutput]",[3409,3422],"[dataSensors.sensor, loadSensors]"]