[{"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\index.js":"1","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\App.js":"2","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\Homepage.js":"3","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\utils\\queries.js":"4","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\BaseCalibration.js":"5","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\SensorOutput.js":"6","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\SensorData.js":"7","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\PerformanceOutput.js":"8","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\Sensors.js":"9"},{"size":172,"mtime":1652249589586,"results":"10","hashOfConfig":"11"},{"size":881,"mtime":1652253783791,"results":"12","hashOfConfig":"11"},{"size":26710,"mtime":1652377281744,"results":"13","hashOfConfig":"11"},{"size":1477,"mtime":1652288833913,"results":"14","hashOfConfig":"11"},{"size":6268,"mtime":1652377279373,"results":"15","hashOfConfig":"11"},{"size":3190,"mtime":1652285518488,"results":"16","hashOfConfig":"11"},{"size":6025,"mtime":1652377267761,"results":"17","hashOfConfig":"11"},{"size":2705,"mtime":1652284552861,"results":"18","hashOfConfig":"11"},{"size":1033,"mtime":1652291095178,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"xw1hmg",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\index.js",[],["42","43"],"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\App.js",["44","45"],"import logo from './logo.svg';\nimport './App.css';\nimport Homepage from './components/Homepage';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n  opts: {\n    mode: 'cors',\n  }\n});\n\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  \n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nconst token = localStorage.getItem(\"id_token\")\n\nfunction App() {\n  return (\n    <div>\n      <ApolloProvider client={client}>\n        <Homepage />\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\Homepage.js",["46","47","48","49","50","51","52","53","54","55","56","57","58","59","60"],"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\utils\\queries.js",[],"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\BaseCalibration.js",["61"],"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\SensorOutput.js",["62"],"// Displays:\r\n// calibration_file\r\n// generation_date\r\n// algorithm_version\r\n// sensors []\r\n\r\nimport classes from './row.module.css'\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst SensorOutput = ({data}) =>{\r\n        let date = new Date(data.generation_date*1);\r\n        let day = date.getDate();\r\n        let month = date.getMonth()+1;\r\n        let year = date.getFullYear();\r\n    \r\n        const [showSensors, setShowSensors] = useState(false);        \r\n    \r\n        let generationDate = month + '/' + day + '/' + year\r\n        return (\r\n            <div>\r\n                <div className={classes.row}>\r\n                    <div>\r\n                        <div>\r\n                            Calibration File\r\n                        </div>\r\n                        <div>{data.calibration_file}</div>\r\n                    </div>\r\n    \r\n                    <div>\r\n                        <div>\r\n                            Generation Date\r\n                        </div>\r\n                        <div>{generationDate}</div>\r\n    \r\n                    </div>\r\n    \r\n                    <div>\r\n                        <div>\r\n                            Algorithm Version\r\n                        </div>\r\n                        <div>{data.algorithm_version}</div>\r\n    \r\n                    </div>\r\n    \r\n                    <div>\r\n                        <div>\r\n                            Sensor List\r\n                        </div>\r\n                        <button onClick={() => setShowSensors(!showSensors)}>v</button>\r\n                    </div>\r\n                </div>\r\n    \r\n                {/* Sensors should show: */}\r\n                {/* unique_id */}\r\n                {/* calibration_parameters */}\r\n                {showSensors ? (\r\n                    <div className={classes.sensors}>\r\n                        {data.sensors.map((sensor, index) => (\r\n                            <div key={index} className={classes.row}>\r\n                                <div>\r\n                                    <div>\r\n                                        Unique ID\r\n                                    </div>\r\n                                    {sensor.sensor_unique_id}\r\n                                </div>\r\n    \r\n                                <div>\r\n                                    <div>\r\n                                        Calibration Parameters\r\n                                    </div>\r\n                                    <div>\r\n                                        [{sensor.calibration_parameters[0].split(':')[0]}]\r\n                                    </div>\r\n                                    <div>\r\n                                        [{sensor.calibration_parameters[0].split(':')[1]}]\r\n                                    </div>\r\n                                    <div>\r\n                                        [{sensor.calibration_parameters[0].split(':')[2]}]\r\n                                    </div>\r\n                                </div>\r\n    \r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n    \r\n                ) : (null)}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default SensorOutput","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\SensorData.js",["63"],"C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\PerformanceOutput.js",["64"],"// Displays:\r\n// validation_date\r\n// algorithm_version\r\n// base_station_unique_id\r\n// sensors []\r\n\r\nimport classes from './row.module.css'\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst PerformanceOutput = ({data}) =>{\r\n    let date = new Date(data.validation_date*1);\r\n    let day = date.getDate();\r\n    let month = date.getMonth()+1;\r\n    let year = date.getFullYear();\r\n\r\n    const [showSensors, setShowSensors] = useState(false);\r\n\r\n    let validationDate = month + '/' + day + '/' + year\r\n    return (\r\n        <div>\r\n            <div className={classes.row}>\r\n                <div>\r\n                    <div>\r\n                        Validation Date\r\n                    </div>\r\n                    <div>{validationDate}</div>\r\n                </div>\r\n\r\n                <div>\r\n                    <div>\r\n                        Algorithm Version\r\n                    </div>\r\n                    <div>{data.algorithm_version}</div>\r\n\r\n                </div>\r\n\r\n                <div>\r\n                    <div>\r\n                        Base Station ID\r\n                    </div>\r\n                    <div>{data.base_station_unique_id}</div>\r\n\r\n                </div>\r\n\r\n                <div>\r\n                    <div>\r\n                        Sensor List\r\n                    </div>\r\n                    <button onClick={() => setShowSensors(!showSensors)}>v</button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Sensors should show: */}\r\n            {/* unique_id */}\r\n            {/* accuracy */}\r\n            {/* precision */}\r\n            {showSensors ? (\r\n                <div className={classes.sensors}>\r\n                    {data.sensors.map((sensor, index) => (\r\n                        <div key={index} className={classes.row}>\r\n                            <div>\r\n                                <div>\r\n                                    Unique ID\r\n                                </div>\r\n                                {sensor.sensor_unique_id}\r\n                            </div>\r\n\r\n                            <div>\r\n                                <div>\r\n                                    Accuracy\r\n                                </div>\r\n                                {sensor.accuracy}mm\r\n                            </div>\r\n\r\n                            <div>\r\n                                <div>\r\n                                    Precision\r\n                                </div>\r\n                                {sensor.precision}mm\r\n                            </div>\r\n\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n            ) : (null)}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default PerformanceOutput","C:\\Users\\OEM\\Desktop\\solo-applications\\ommo-coding-challenge\\client\\src\\components\\dataRows\\Sensors.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":1,"column":8,"nodeType":"71","messageId":"72","endLine":1,"endColumn":12},{"ruleId":"69","severity":1,"message":"73","line":37,"column":7,"nodeType":"71","messageId":"72","endLine":37,"endColumn":12},{"ruleId":"69","severity":1,"message":"74","line":45,"column":75,"nodeType":"71","messageId":"72","endLine":45,"endColumn":95},{"ruleId":"69","severity":1,"message":"75","line":46,"column":71,"nodeType":"71","messageId":"72","endLine":46,"endColumn":89},{"ruleId":"69","severity":1,"message":"76","line":47,"column":79,"nodeType":"71","messageId":"72","endLine":47,"endColumn":101},{"ruleId":"69","severity":1,"message":"77","line":48,"column":89,"nodeType":"71","messageId":"72","endLine":48,"endColumn":116},{"ruleId":"69","severity":1,"message":"78","line":49,"column":63,"nodeType":"71","messageId":"72","endLine":49,"endColumn":77},{"ruleId":"79","severity":1,"message":"80","line":55,"column":8,"nodeType":"81","endLine":55,"endColumn":27,"suggestions":"82"},{"ruleId":"79","severity":1,"message":"83","line":61,"column":8,"nodeType":"81","endLine":61,"endColumn":25,"suggestions":"84"},{"ruleId":"79","severity":1,"message":"85","line":67,"column":8,"nodeType":"81","endLine":67,"endColumn":29,"suggestions":"86"},{"ruleId":"79","severity":1,"message":"87","line":73,"column":8,"nodeType":"81","endLine":73,"endColumn":34,"suggestions":"88"},{"ruleId":"79","severity":1,"message":"89","line":79,"column":8,"nodeType":"81","endLine":79,"endColumn":21,"suggestions":"90"},{"ruleId":"91","severity":1,"message":"92","line":277,"column":64,"nodeType":"93","messageId":"94","endLine":277,"endColumn":66},{"ruleId":"91","severity":1,"message":"92","line":293,"column":64,"nodeType":"93","messageId":"94","endLine":293,"endColumn":66},{"ruleId":"91","severity":1,"message":"92","line":309,"column":64,"nodeType":"93","messageId":"94","endLine":309,"endColumn":66},{"ruleId":"91","severity":1,"message":"92","line":330,"column":64,"nodeType":"93","messageId":"94","endLine":330,"endColumn":66},{"ruleId":"91","severity":1,"message":"92","line":351,"column":64,"nodeType":"93","messageId":"94","endLine":351,"endColumn":66},{"ruleId":"69","severity":1,"message":"95","line":8,"column":20,"nodeType":"71","messageId":"72","endLine":8,"endColumn":29},{"ruleId":"69","severity":1,"message":"95","line":9,"column":20,"nodeType":"71","messageId":"72","endLine":9,"endColumn":29},{"ruleId":"69","severity":1,"message":"95","line":7,"column":20,"nodeType":"71","messageId":"72","endLine":7,"endColumn":29},{"ruleId":"69","severity":1,"message":"95","line":9,"column":20,"nodeType":"71","messageId":"72","endLine":9,"endColumn":29},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'token' is assigned a value but never used.","'refetchSensorCalData' is assigned a value but never used.","'refetchBaseCalData' is assigned a value but never used.","'refetchSensorCalOutput' is assigned a value but never used.","'refetchPerformanceValOutput' is assigned a value but never used.","'refetchSensors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dataSensorCalData.sensorCalData'. Either include it or remove the dependency array.","ArrayExpression",["98"],"React Hook useEffect has a missing dependency: 'dataBaseCalData.baseCalData'. Either include it or remove the dependency array.",["99"],"React Hook useEffect has a missing dependency: 'dataSensorCalOutput.sensorCalOutput'. Either include it or remove the dependency array.",["100"],"React Hook useEffect has a missing dependency: 'dataPerformanceValOutput.performanceValOutput'. Either include it or remove the dependency array.",["101"],"React Hook useEffect has a missing dependency: 'dataSensors.sensor'. Either include it or remove the dependency array.",["102"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [dataSensorCalData.sensorCalData, loadSensorCalData]",{"range":"113","text":"114"},"Update the dependencies array to be: [dataBaseCalData.baseCalData, loadBaseCalData]",{"range":"115","text":"116"},"Update the dependencies array to be: [dataSensorCalOutput.sensorCalOutput, loadSensorCalOutput]",{"range":"117","text":"118"},"Update the dependencies array to be: [dataPerformanceValOutput.performanceValOutput, loadPerformanceValOutput]",{"range":"119","text":"120"},"Update the dependencies array to be: [dataSensors.sensor, loadSensors]",{"range":"121","text":"122"},[2755,2774],"[dataSensorCalData.sensorCalData, loadSensorCalData]",[2908,2925],"[dataBaseCalData.baseCalData, loadBaseCalData]",[3075,3096],"[dataSensorCalOutput.sensorCalOutput, loadSensorCalOutput]",[3266,3292],"[dataPerformanceValOutput.performanceValOutput, loadPerformanceValOutput]",[3409,3422],"[dataSensors.sensor, loadSensors]"]